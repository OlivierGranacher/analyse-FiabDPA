---
title: "Analyse des factures mensuelles DPA de Mille 2"
author: "OG"
format: 
  html:
    embed-resources: true
    toc: true
date: last-modified
lang: fr
code-fold: true
number-sections: true
editor: visual
fig-width: 8
fig-asp: .62
fig-align: left
execute:
  eval: true
  cache: false
  warning: false
  echo: false
  include: false
theme: flatly
---

```{r}
#| label: setup
#| cache: true
library(dplyr)
library(glue)
library(lubridate)
library(ggplot2)
theme_set(customColors::theme_potline())
# palette name pour plots - MetBrewer Package
pal_name <- "Austria"
file_path <- "data/factures_dpa_Mille.xlsx"
# Nombre de mois max des données
n_mois_max <- 15

```

```{r}
#| label: import_tidy_data
# Import des données des diagnostics et réparations
d_raw <- readxl::read_xlsx(
  path = file_path,
  sheet = "data_detail",
  range = "A1:E500" ) |>
 janitor::clean_names() |> 
  na.omit() |> 
  mutate(across(where(is.character), .fns = ~stringr::str_to_lower(.x)))
### période des données
dat_min <- min(d_raw$mois) |> format("%d-%m-%Y")
dat_max <- max(d_raw$mois) |> format("%d-%m-%Y")

# Import des catégories d'interventions
cat <- readxl::read_xlsx(
  path = file_path,
  sheet = "listes",
  range = "C1:D500"
) |> janitor::clean_names() |> 
  mutate(across(where(is.character), .fns = ~stringr::str_to_lower(.x))) |> 
  na.omit()
# Import des totaux couts par mois
cout_mois <- readxl::read_xlsx(
  path = file_path,
  sheet = "data_mois",
  range = "A1:B500"  
) |> janitor::clean_names() |> 
  na.omit()
# Concaténation des données
ddd <- d_raw |> 
  left_join(
    cat,
    join_by(poste)
  ) |> 
  left_join(
    cout_mois,
    join_by(mois)
            )
mois_max <- max(d_raw$mois) |> format("%B %Y")
# mois max en Posixct
mois_max_ <- max(d_raw$mois) |> as.POSIXct() 
# Limitation du nombre de mois
ddd = ddd |> 
  filter(mois >= (mois_max_ - months(n_mois_max)))
mois_min <- min(d_raw$mois) |> format("%B %Y")            
# n_mois nombre de mois analysés
n_mois <- nrow(cout_mois)
# Cout total de tous les mois
cout_total <- sum(cout_mois$cout_dpa_mois)
# cout annulalisé
cout_annualise <- (cout_total * 12 / n_mois) |> round(-3)
# cout_moyen
cout_moyen_mois <- (cout_total / n_mois) |> round(-2)
# date range
### période des données

date_range_title <- glue("{n_mois} mois de {mois_min} à {mois_max}")
# Subtitle 
sub <- "% de la facture totale"
# ajout nombre de DPA changés par mois à cout_mois
cout_mois <- ddd |> 
  filter(poste == "prise_charge_transport") |> 
  select(mois, nombre) |> 
  right_join(cout_mois, join_by(mois)) |> 
  rename(nb_dpa = nombre)
# Nombre moyen de DPA réparés par mois
nb_dpa_moy = mean(cout_mois$nb_dpa) |> round(1)
# Création de la catégorie autres pour les couts sans catégorie
ddd <- ddd |> 
  group_by(mois) |> 
  summarise(cout_cat = sum(cout)) |> 
  inner_join(cout_mois, join_by(mois)) |> 
  mutate(poste = "autres",
         nombre = 1,
         prix_unitaire = cout_dpa_mois - cout_cat,
         cout = cout_dpa_mois - cout_cat,
         categorie = "autres",
         ) |> 
  select(-c(cout_cat, nb_dpa)) |> 
  bind_rows(ddd)
  
# Nombre de postes par categorie
cat <- cat |> 
  add_count(categorie, name = "n_postes")
# expand grid pour postes à zéro dans le mois
ddd <- expand.grid(mois = unique(ddd$mois), poste = unique(ddd$poste)) |> 
  left_join(ddd, join_by(mois, poste)) |> 
  select(-categorie) |> 
  inner_join(cat, join_by(poste)) |> 
  tidyr::replace_na(list(cout_dpa_mois = 0, nombre = 0, cout = 0 , prix_unitaire = 0))
```

```{r}
#| label: colors
# Définition des couleurs pour les graphiques
cat_list <- ddd |> 
  group_by(categorie) |> 
  summarise(cout_cat = sum(cout)) |> 
  arrange(desc(cout_cat)) |> 
  pull(categorie)

pal_cat <- MetBrewer::met.brewer(pal_name, length(cat_list))
names(pal_cat) <- cat_list
```

```{r}
#| label: plot_pareto_cout_fn
# Pareto des coûts par categorie
plot_pareto_cout <- function(d = ddd, .cat = "verin_piqueur", pal = pal_cat) {
  # definition de la palette de couleurs
  nb_postes <- cat |> 
    filter(categorie == .cat) |> 
    pull() |> mean()
  base_col <- pal[.cat] 
  col_val <- customColors::colorRangeOneColor(nb_postes,
                                              base_col,
                                              rev = T,
                                              begin = 25,
                                              end = 70
                                              )
  d |> 
    filter(categorie == .cat) |> 
    group_by(poste) |> 
    summarise(cout_poste = sum(cout, na.rm = T)/cout_total) |> 
    mutate(poste = forcats::fct_reorder(
      poste,
      cout_poste,
      .desc = F
    )) |> 
   ggplot(aes(x = cout_poste, 
             y = poste)
         
         ) +
  geom_col(aes(fill = poste) , color = "grey20"
           ) +
  scale_fill_manual(values = col_val ) +
  scale_x_continuous(labels = scales::label_percent()) +
  labs(x = "",
       title = glue("Coûts {.cat}"),
       subtitle = sub,
       caption = date_range_title,
       y = "") +
  theme(legend.position = 'none'
      )
}
#plot_pareto_cout()
```

## Objectif

> Visualiser la décomposition des coûts de réparation des DPA sur la base des factures
> mensuelles de Mille

## Nombre de DPA réparés

```{r}
#| label: nb_dpa_mois
#| include: true 
ddd |>   
  filter(poste == "prise_charge_transport") |>   
  group_by(mois) |>    
  summarise(nb_dpa = sum(nombre)) |>   
  ggplot(aes(x = mois, y = nb_dpa)) +   
  geom_col(fill = pal_cat["prise_charge_transport"], alpha = .8, color = "gray20") +   
  geom_text(aes(label = nb_dpa, y = nb_dpa -10), color = "white") + 
  geom_hline(yintercept = nb_dpa_moy, lty = 2, color = "gray40") +
  scale_x_datetime(date_breaks = "1 month", labels = scales::label_date_short()) +
  theme(axis.text.x = element_text( hjust = 1)) +   
  labs(title = "Nombre de DPA réparés par mois",
       x = "",
       y = "")
```

## Coût Moyen par DPA

```{r}
#| label: periodes_cout_DPA
## Définition des périodes des couts par DPA ----
# Date de fin de la surfacturation des joints de vérins piqueur
dat_surf <- "01-07-2024"
# Date de début d'envoi des diagnotics chez Mille
dat_diag <- "28-02-2025"
# Ajout des périodes à cout_mois
cout_mois <- cout_mois |> 
  mutate(
    periode =
      case_when(
        mois < dmy(dat_surf) ~ 1,
        between(mois, dmy(dat_surf), dmy(dat_diag)) ~ 2, 
        .default = 3
      )
  ) |> 
  mutate(
    cout_par_dpa = round(cout_dpa_mois / nb_dpa, -1)
  ) |>
  group_by(periode
  ) |> 
  mutate(
    cout_moy_periode_dpa = round(mean(cout_par_dpa), 0)
  ) |> 
  arrange(mois)
## libellés périodes ----
per <- tibble(
  periode = unique(cout_mois$periode),
  desc_periode = c("Erreur facturation joints",
          "Facturation joints correcte",
          "Transmission des diagnostics"
          )
)

```

```{r}
#| label: cout_moy_dpa
#| include: true
cout_mois |> 
  ggplot(aes(mois, y = cout_dpa_mois/nb_dpa)) +
  scale_x_datetime(date_breaks = "1 month", labels = scales::label_date_short()) +
  scale_y_continuous(labels = scales::label_dollar(prefix = "€", big.mark = ".")) +
  geom_line(linewidth = 1, color = "darkorange", alpha = .4) +
geom_step(aes(mois, cout_moy_periode_dpa), color = "darkorange2", linewidth = 1) +
#  geom_vline(xintercept = as_datetime(dmy(c(dat_surf, dat_diag))), lty = 3) +
  labs(title = "Cout réparation moyen par DPA",
       subtitle = "base factures Mille"
       ) +
  annotate(  # arrow 1
    "segment",
    x = as_datetime(dmy("06072024")),
    xend = as_datetime(dmy("01092024")),
    y = 1200,
    yend = 1350,
   arrow =  arrow(type = "open", length = unit(0.025, "npc"), ends = "first"
                  )
  ) +
  annotate( # arrow 2
    "segment",
    x = as_datetime(dmy("01012025")),
    xend = as_datetime(dmy("01032025")),
    y = 1190,
    yend = 980,
   arrow =  arrow(type = "open", length = unit(0.025, "npc"), ends = "last"
                  )
  ) +
  annotate( # text 1
    "text",
    x = as_datetime(dmy("15082024")),
    y = 1400,
    label = "Fin de l'erreur de facturation \n des joints de piqueur",
    size = 3
  ) +
  annotate( # text 2
    "text",
    x = as_datetime(dmy("01012025")),
    y = 1250,
    label = "Début de l'envoi des diagnostics \n à Mille",
    size = 3
  )

```

```{r}
#| label: table_couts_moyens
#| include: true
cout_mois |> 
  inner_join(per, join_by(periode)) |> 
  group_by(desc_periode) |> 
  summarise(
    cout_moyen_dpa = round(mean(cout_par_dpa), -1)
  ) |>  
  gt::gt(cap = "Evolution du cout moyen par DPA par période") |> 
  gt::fmt_currency(cout_moyen_dpa, currency = "EUR", decimals = 0)
```

## Nombre Maintenance Vérins Piqueur

```{r}
#| label: nb_maint_2
#| include: true 
ddd |>   
  filter(poste %in% c("maintenance_niveau2", "joints_piqueur", "remise_etat_dpa", "maintenance_niveau1")) |>   
  group_by(mois, categorie, poste) |>    
  summarise(nb_rep = sum(nombre)) |>   
  ggplot(aes(x = mois, y = nb_rep, color = poste, group = poste)) +   
  geom_line(size = 1.5) + 
  geom_point() +
  geom_text(aes(label = nb_rep, y = nb_rep + 4), label.size = 1) + 
  geom_hline(yintercept = nb_dpa_moy, lty = 2, color = "gray40") +
  MetBrewer::scale_color_met_d(pal_name) +
  scale_x_datetime(date_breaks = "1 month", labels = scales::label_date_short()) +
  theme(axis.text.x = element_text( hjust = .5),
        legend.text = element_text(face = "bold"),
        legend.title = element_blank()
        ) +   
  labs(title = "Réparations vérins piqueur ",
       x = "",
       y = "") +
  guides(
    color = guide_legend(reverse = T)
  )
```

## Nombre de Pointerolles et Râcleurs

```{r}
#| label: nb_point
#| include: true 
ddd |>   
  filter(poste %in% c("pointerolle", "racleur")) |>   
  group_by(mois, categorie, poste) |>    
  summarise(nb_rep = sum(nombre)) |>   
  ggplot(aes(x = mois, y = nb_rep, color = poste, group = poste)) +   
  geom_line(size = 1.5) + 
  geom_point() +
  geom_text(aes(label = nb_rep, y = nb_rep + 4), label.size = 1) + 
  MetBrewer::scale_color_met_d(pal_name) +
  scale_x_datetime(date_breaks = "1 month", labels = scales::label_date_short()) +
  theme(axis.text.x = element_text( hjust = .5),
        legend.text = element_text(face = "bold"),
        legend.title = element_blank()
        ) +   
  labs(title = "Remplacements Pointerolle/Râcleur",
       x = "",
       y = "") +
  guides(
    color = guide_legend(reverse = T)
  )
```

## Coûts Mensuels par Composant

```{r}
#| label: visu_couts_mois
#| include: true
ddd |>
  group_by(mois, categorie) |>
  summarise(cout_mois_compos = sum(cout)) |> 
  ggplot(aes(x = mois, fill = forcats::fct_reorder(categorie, cout_mois_compos), y = cout_mois_compos)) +
  geom_col( alpha = .9, color = "black") +
  geom_hline(yintercept = cout_moyen_mois, lty = 2, alpha = .5) +
  geom_text(data = cout_mois, aes(x = mois, y = 5000, label= nb_dpa), inherit.aes = F, color = "white", size = 3, face = "bold") +
  annotate(geom = "text", x = min(ddd$mois), y = cout_moyen_mois + 3000, label = "coût mensuel moyen" , hjust = 0, color = "grey50") +
  scale_x_datetime(labels = scales::label_date_short(),
                   date_breaks = "1 month"
                   ) +
  scale_y_continuous(labels = scales::label_number(suffix = "€")) +
  scale_fill_manual(values = pal_cat, name = "") +
  labs(title = "Couts DPA mensuels par composant",
       caption = glue("Cout moyen mensuel : {cout_moyen_mois}€ \n {date_range_title}"),
      x = "", y = ""                 
       ) +
  theme(
        legend.key.size = unit(.8, "lines")
        )
    
```

## Paretos Coûts par composant sur les 3 derniers mois

```{r}
#| label: pareto_cout_cat
#| include: true
# cout total des 3 derniers mois
cout_total_3mois = ddd |> 
  filter(mois >= mois_max_ - months(3)) |> 
  summarise(cout_total = sum(cout, na.rm = T)) |> 
  pull(cout_total)
ddd |> 
  filter(mois >= mois_max_ - months(3)) |>
  group_by(categorie) |> 
  summarise(cout_cat = sum(cout, na.rm = T)/cout_total_3mois) |> 
  ggplot(aes(x = cout_cat, 
             y = forcats::fct_reorder(
               categorie,
               cout_cat,
               .desc = F
               )
             )
         
         ) +
  geom_col(aes(fill = forcats::fct_reorder(
               categorie,
               cout_cat,
               .desc = T
               ))
           , color = "grey20"
           ) +
  scale_fill_manual(values = pal_cat ) +
  scale_x_continuous(labels = scales::label_percent()) +
  labs(x = "",
       title = "Coûts DPA par composant \nsur les 3 derniers mois",
       subtitle = sub,
       caption = date_range_title,
       y = "") +
  theme(legend.position = 'none'
      )
```

## Poste de Coûts Principaux

```{r}
#| label: pareto_couts_postes
#| include: true

# Nombre de Couts à afficher
nb_couts_aff <- 6 
ddd |> 
  group_by(categorie, poste) |> 
  summarise(cout_poste = sum(cout)/cout_total) |> 
  arrange(desc(cout_poste)) |> 
  head(nb_couts_aff) |> 
  ggplot(aes(x = cout_poste, 
             y = forcats::fct_reorder(
               poste,
               cout_poste,
               .desc = F
               )
             )
         
         ) +
  geom_col(mapping = aes(fill = categorie), color = "grey20"
           ) +
  scale_fill_manual(values = pal_cat ) +
  scale_x_continuous(labels = scales::label_percent()) +
  labs(x = "",
       title = glue("Coûts DPA par poste"),
       subtitle = glue("({nb_couts_aff} plus élevés)"),
       caption = date_range_title,
       y = "") +
  theme(legend.position = 'none'
      )
```

## Coûts pour les Vérins Piqueurs

```{r}
#| label: pareto_cout_vp
#| include: true
plot_pareto_cout(.cat = "verin_piqueur")
```

## Coûts pour Pointerolle/Rallonge

```{r}
#| label: pareto_cout_point
#| include: true
plot_pareto_cout(.cat = "pointerolle_rallonge")
```

## Coûts Distributeur

```{r}
#| label: pareto_cout_distr
#| include: true
plot_pareto_cout(.cat = "distributeur")
```

## Vérification des données

### Postes sans coût dans le mois

```{r}
#| label: couts_poste_mois
#| include: true
ddd |> 
group_by(poste) |> 
summarise(n_mois_manquant = n_mois - n()) |> 
  ungroup() |> 
filter(n_mois_manquant > 0) |> 
  arrange(desc(n_mois_manquant)) |> 
  gt::gt(caption = "Postes non présents tous les mois") |> 
  gt::opt_stylize(color = "gray")
```

### Couverture des Coûts Mensuels

> Pourcentage des couts analysés chaque mois

```{r}
#| label: pc_couts
#| include: true

ddd |> 
  filter(poste != "autres") |> 
group_by(mois) |> 
summarise(pc_cout_analyse = sum(cout)/max(cout_dpa_mois)) |> 
gt::gt(cap = "% coûts analysés") |> 
gt::fmt_percent(col = pc_cout_analyse, deci = 0)
```